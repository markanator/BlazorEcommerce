@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0) {
    <span>Loading....</span>
}
else
{
    <ul class="list-unstyled">
        @foreach (var item in ProductService.Products)
       {
           <li class="media my-3">
               <div class="media-img-wrapper mr-2">
                   <a href="/product/@item.Id">
                       <img class="media-img" src="@item.ImageUrl" style="max-width:240px;" alt="@item.Title" />
                   </a>
               </div>
               <div class="media-body">
                   <a href="/product/@item.Id">
                       <h4>@item.Title</h4>
                   </a>
                   <p>@item.Description</p>
                   <h5 class="price">
                       $@item.Price
                   </h5>
               </div>
           </li>
       }
    </ul>
}

@code {

    protected override async Task OnInitializedAsync()
    {
        // when this event is invoked, rerender
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose ()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }
}
